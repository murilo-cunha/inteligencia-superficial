{
  
    
        "post0": {
            "title": "Sistemas de recommendação - Neural Collaborative Filtering",
            "content": "Caso esteja rodando o notebook não esqueça de fazer o download das bibliotecas e inicie o tensorboard no background: . No terminal . pip install tensorflow lightfm pandas tensorboard --logdir 2020-09-11-neural_collaborative_filter/logs . ou no notebook . !pip install tensorflow lightfm pandas . %load_ext tensorboard !tensorboard --logdir 2020-09-11-neural_collaborative_filter/logs &amp; . Os dados . Interaction matrix: [[5 3 4 3 3 5 4 0 5 3] [4 0 0 0 0 0 0 0 0 0] [0 0 0 0 0 0 0 0 0 0] [0 0 0 0 0 0 0 0 0 0] [0 0 0 0 0 0 0 0 0 0] [4 0 0 0 0 0 0 4 4 0] [0 0 0 5 0 0 5 5 5 4] [0 0 0 0 0 0 3 0 0 0] [0 0 0 0 0 0 4 0 0 0] [4 0 0 4 0 0 0 0 4 0]] . #collapse for dataset in [&quot;test&quot;, &quot;train&quot;]: data[dataset] = (data[dataset].toarray() &gt; 0).astype(&quot;int8&quot;) # Make the ratings binary print(&quot;Interaction matrix:&quot;) print(data[&quot;train&quot;][:10, :10]) print(&quot; nRatings:&quot;) unique_ratings = np.unique(data[&quot;train&quot;]) print(unique_ratings) . . Interaction matrix: [[1 1 1 1 1 1 1 0 1 1] [1 0 0 0 0 0 0 0 0 0] [0 0 0 0 0 0 0 0 0 0] [0 0 0 0 0 0 0 0 0 0] [0 0 0 0 0 0 0 0 0 0] [1 0 0 0 0 0 0 1 1 0] [0 0 0 1 0 0 1 1 1 1] [0 0 0 0 0 0 1 0 0 0] [0 0 0 0 0 0 1 0 0 0] [1 0 0 1 0 0 0 0 1 0]] Ratings: [0 1] . from typing import List def wide_to_long(wide: np.array, possible_ratings: List[int]) -&gt; np.array: &quot;&quot;&quot;Go from wide table to long. :param wide: wide array with user-item interactions :param possible_ratings: list of possible ratings that we may have.&quot;&quot;&quot; def _get_ratings(arr: np.array, rating: int) -&gt; np.array: &quot;&quot;&quot;Generate long array for the rating provided :param arr: wide array with user-item interactions :param rating: the rating that we are interested&quot;&quot;&quot; idx = np.where(arr == rating) return np.vstack( (idx[0], idx[1], np.ones(idx[0].size, dtype=&quot;int8&quot;) * rating) ).T long_arrays = [] for r in possible_ratings: long_arrays.append(_get_ratings(wide, r)) return np.vstack(long_arrays) . long_train = wide_to_long(data[&quot;train&quot;], unique_ratings) df_train = pd.DataFrame(long_train, columns=[&quot;user_id&quot;, &quot;item_id&quot;, &quot;interaction&quot;]) . All interactions: . user_id item_id interaction . 0 0 | 7 | 0 | . 1 0 | 10 | 0 | . 2 0 | 19 | 0 | . 3 0 | 20 | 0 | . 4 0 | 26 | 0 | . Only positive interactions: . user_id item_id interaction . 1511499 0 | 0 | 1 | . 1511500 0 | 1 | 1 | . 1511501 0 | 2 | 1 | . 1511502 0 | 3 | 1 | . 1511503 0 | 4 | 1 | . O modelo (Neural Collaborative Filtering) . import tensorflow.keras as keras from tensorflow.keras.layers import ( Concatenate, Dense, Embedding, Flatten, Input, Multiply, ) from tensorflow.keras.models import Model from tensorflow.keras.regularizers import l2 def create_ncf( number_of_users: int, number_of_items: int, latent_dim_mf: int = 4, latent_dim_mlp: int = 32, reg_mf: int = 0, reg_mlp: int = 0.01, dense_layers: List[int] = [8, 4], reg_layers: List[int] = [0.01, 0.01], activation_dense: str = &quot;relu&quot;, ) -&gt; keras.Model: # input layer user = Input(shape=(), dtype=&quot;int32&quot;, name=&quot;user_id&quot;) item = Input(shape=(), dtype=&quot;int32&quot;, name=&quot;item_id&quot;) # embedding layers mf_user_embedding = Embedding( input_dim=number_of_users, output_dim=latent_dim_mf, name=&quot;mf_user_embedding&quot;, embeddings_initializer=&quot;RandomNormal&quot;, embeddings_regularizer=l2(reg_mf), input_length=1, ) mf_item_embedding = Embedding( input_dim=number_of_items, output_dim=latent_dim_mf, name=&quot;mf_item_embedding&quot;, embeddings_initializer=&quot;RandomNormal&quot;, embeddings_regularizer=l2(reg_mf), input_length=1, ) mlp_user_embedding = Embedding( input_dim=number_of_users, output_dim=latent_dim_mlp, name=&quot;mlp_user_embedding&quot;, embeddings_initializer=&quot;RandomNormal&quot;, embeddings_regularizer=l2(reg_mlp), input_length=1, ) mlp_item_embedding = Embedding( input_dim=number_of_items, output_dim=latent_dim_mlp, name=&quot;mlp_item_embedding&quot;, embeddings_initializer=&quot;RandomNormal&quot;, embeddings_regularizer=l2(reg_mlp), input_length=1, ) # MF vector mf_user_latent = Flatten()(mf_user_embedding(user)) mf_item_latent = Flatten()(mf_item_embedding(item)) mf_cat_latent = Multiply()([mf_user_latent, mf_item_latent]) # MLP vector mlp_user_latent = Flatten()(mlp_user_embedding(user)) mlp_item_latent = Flatten()(mlp_item_embedding(item)) mlp_cat_latent = Concatenate()([mlp_user_latent, mlp_item_latent]) mlp_vector = mlp_cat_latent # build dense layers for model for i in range(len(dense_layers)): layer = Dense( dense_layers[i], activity_regularizer=l2(reg_layers[i]), activation=activation_dense, name=&quot;layer%d&quot; % i, ) mlp_vector = layer(mlp_vector) predict_layer = Concatenate()([mf_cat_latent, mlp_vector]) result = Dense( 1, activation=&quot;sigmoid&quot;, kernel_initializer=&quot;lecun_uniform&quot;, name=&quot;interaction&quot; ) output = result(predict_layer) model = Model( inputs=[user, item], outputs=[output], ) return model . #collapse from tensorflow.keras.optimizers import Adam n_users, n_items = data[&quot;train&quot;].shape ncf_model = create_ncf(n_users, n_items) ncf_model.compile( optimizer=Adam(), loss=&quot;binary_crossentropy&quot;, metrics=[ tf.keras.metrics.TruePositives(name=&quot;tp&quot;), tf.keras.metrics.FalsePositives(name=&quot;fp&quot;), tf.keras.metrics.TrueNegatives(name=&quot;tn&quot;), tf.keras.metrics.FalseNegatives(name=&quot;fn&quot;), tf.keras.metrics.BinaryAccuracy(name=&quot;accuracy&quot;), tf.keras.metrics.Precision(name=&quot;precision&quot;), tf.keras.metrics.Recall(name=&quot;recall&quot;), tf.keras.metrics.AUC(name=&quot;auc&quot;), ], ) ncf_model._name = &quot;neural_collaborative_filtering&quot; ncf_model.summary() . . Model: &#34;neural_collaborative_filtering&#34; __________________________________________________________________________________________________ Layer (type) Output Shape Param # Connected to ================================================================================================== user_id (InputLayer) [(None,)] 0 __________________________________________________________________________________________________ item_id (InputLayer) [(None,)] 0 __________________________________________________________________________________________________ mlp_user_embedding (Embedding) (None, 32) 30176 user_id[0][0] __________________________________________________________________________________________________ mlp_item_embedding (Embedding) (None, 32) 53824 item_id[0][0] __________________________________________________________________________________________________ flatten_2 (Flatten) (None, 32) 0 mlp_user_embedding[0][0] __________________________________________________________________________________________________ flatten_3 (Flatten) (None, 32) 0 mlp_item_embedding[0][0] __________________________________________________________________________________________________ mf_user_embedding (Embedding) (None, 4) 3772 user_id[0][0] __________________________________________________________________________________________________ mf_item_embedding (Embedding) (None, 4) 6728 item_id[0][0] __________________________________________________________________________________________________ concatenate (Concatenate) (None, 64) 0 flatten_2[0][0] flatten_3[0][0] __________________________________________________________________________________________________ flatten (Flatten) (None, 4) 0 mf_user_embedding[0][0] __________________________________________________________________________________________________ flatten_1 (Flatten) (None, 4) 0 mf_item_embedding[0][0] __________________________________________________________________________________________________ layer0 (Dense) (None, 8) 520 concatenate[0][0] __________________________________________________________________________________________________ multiply (Multiply) (None, 4) 0 flatten[0][0] flatten_1[0][0] __________________________________________________________________________________________________ layer1 (Dense) (None, 4) 36 layer0[0][0] __________________________________________________________________________________________________ concatenate_1 (Concatenate) (None, 8) 0 multiply[0][0] layer1[0][0] __________________________________________________________________________________________________ interaction (Dense) (None, 1) 9 concatenate_1[0][0] ================================================================================================== Total params: 95,065 Trainable params: 95,065 Non-trainable params: 0 __________________________________________________________________________________________________ . def make_tf_dataset( df: pd.DataFrame, targets: List[str], val_split: float = 0.1, batch_size: int = 512, seed=42, ): &quot;&quot;&quot;Make TensorFlow dataset from Pandas DataFrame. :param df: input DataFrame - only contains features and target(s) :param targets: list of columns names corresponding to targets :param val_split: fraction of the data that should be used for validation :param batch_size: batch size for training :param seed: random seed for shuffling the data - setting to `None` will not shuffle the data&quot;&quot;&quot; n_val = round(df.shape[0] * val_split) if seed: # shuffle all the rows x = df.sample(frac=1, random_state=seed).to_dict(&quot;series&quot;) else: x = df.to_dict(&quot;series&quot;) y = dict() for t in targets: y[t] = x.pop(t) ds = tf.data.Dataset.from_tensor_slices((x, y)) ds_val = ds.take(n_val).batch(batch_size) ds_train = ds.skip(n_val).batch(batch_size) return ds_train, ds_val . # create train and validation datasets ds_train, ds_val = make_tf_dataset(df_train, [&quot;interaction&quot;]) . %%time # define logs and callbacks logdir = os.path.join(&quot;logs&quot;, datetime.datetime.now().strftime(&quot;%Y%m%d-%H%M%S&quot;)) tensorboard_callback = tf.keras.callbacks.TensorBoard(logdir, histogram_freq=1) early_stopping_callback = tf.keras.callbacks.EarlyStopping( monitor=&quot;val_loss&quot;, patience=0 ) train_hist = ncf_model.fit( ds_train, validation_data=ds_val, epochs=N_EPOCHS, callbacks=[tensorboard_callback, early_stopping_callback], verbose=1, ) . Epoch 1/10 . /usr/local/anaconda3/envs/inteligencia-superficial/lib/python3.7/site-packages/tensorflow/python/framework/indexed_slices.py:432: UserWarning: Converting sparse IndexedSlices to a dense Tensor of unknown shape. This may consume a large amount of memory. &#34;Converting sparse IndexedSlices to a dense Tensor of unknown shape. &#34; . 1/2789 [..............................] - ETA: 0s - loss: 2.7761 - tp: 1.0000 - fp: 32.0000 - tn: 459.0000 - fn: 20.0000 - accuracy: 0.8984 - precision: 0.0303 - recall: 0.0476 - auc: 0.4325WARNING:tensorflow:From /usr/local/anaconda3/envs/inteligencia-superficial/lib/python3.7/site-packages/tensorflow/python/ops/summary_ops_v2.py:1277: stop (from tensorflow.python.eager.profiler) is deprecated and will be removed after 2020-07-01. Instructions for updating: use `tf.profiler.experimental.stop` instead. WARNING:tensorflow:Callbacks method `on_train_batch_end` is slow compared to the batch time (batch time: 0.0031s vs `on_train_batch_end` time: 0.0254s). Check your callbacks. 2789/2789 [==============================] - 9s 3ms/step - loss: 0.2318 - tp: 1691.0000 - fp: 789.0000 - tn: 1359625.0000 - fn: 65408.0000 - accuracy: 0.9536 - precision: 0.6819 - recall: 0.0252 - auc: 0.8033 - val_loss: 0.1408 - val_tp: 902.0000 - val_fp: 416.0000 - val_tn: 150669.0000 - val_fn: 6626.0000 - val_accuracy: 0.9556 - val_precision: 0.6844 - val_recall: 0.1198 - val_auc: 0.9020 Epoch 2/10 2789/2789 [==============================] - 8s 3ms/step - loss: 0.1279 - tp: 11668.0000 - fp: 6340.0000 - tn: 1354074.0000 - fn: 55431.0000 - accuracy: 0.9567 - precision: 0.6479 - recall: 0.1739 - auc: 0.9164 - val_loss: 0.1236 - val_tp: 1532.0000 - val_fp: 854.0000 - val_tn: 150231.0000 - val_fn: 5996.0000 - val_accuracy: 0.9568 - val_precision: 0.6421 - val_recall: 0.2035 - val_auc: 0.9195 Epoch 3/10 2789/2789 [==============================] - 8s 3ms/step - loss: 0.1191 - tp: 13715.0000 - fp: 7758.0000 - tn: 1352656.0000 - fn: 53384.0000 - accuracy: 0.9572 - precision: 0.6387 - recall: 0.2044 - auc: 0.9254 - val_loss: 0.1198 - val_tp: 1587.0000 - val_fp: 835.0000 - val_tn: 150250.0000 - val_fn: 5941.0000 - val_accuracy: 0.9573 - val_precision: 0.6552 - val_recall: 0.2108 - val_auc: 0.9232 Epoch 4/10 2789/2789 [==============================] - 8s 3ms/step - loss: 0.1148 - tp: 14333.0000 - fp: 7576.0000 - tn: 1352838.0000 - fn: 52766.0000 - accuracy: 0.9577 - precision: 0.6542 - recall: 0.2136 - auc: 0.9293 - val_loss: 0.1160 - val_tp: 1610.0000 - val_fp: 797.0000 - val_tn: 150288.0000 - val_fn: 5918.0000 - val_accuracy: 0.9577 - val_precision: 0.6689 - val_recall: 0.2139 - val_auc: 0.9267 Epoch 5/10 2789/2789 [==============================] - 8s 3ms/step - loss: 0.1114 - tp: 15531.0000 - fp: 7649.0000 - tn: 1352765.0000 - fn: 51568.0000 - accuracy: 0.9585 - precision: 0.6700 - recall: 0.2315 - auc: 0.9335 - val_loss: 0.1138 - val_tp: 1777.0000 - val_fp: 877.0000 - val_tn: 150208.0000 - val_fn: 5751.0000 - val_accuracy: 0.9582 - val_precision: 0.6696 - val_recall: 0.2361 - val_auc: 0.9294 Epoch 6/10 2789/2789 [==============================] - 8s 3ms/step - loss: 0.1088 - tp: 16978.0000 - fp: 8344.0000 - tn: 1352070.0000 - fn: 50121.0000 - accuracy: 0.9590 - precision: 0.6705 - recall: 0.2530 - auc: 0.9373 - val_loss: 0.1120 - val_tp: 1927.0000 - val_fp: 975.0000 - val_tn: 150110.0000 - val_fn: 5601.0000 - val_accuracy: 0.9585 - val_precision: 0.6640 - val_recall: 0.2560 - val_auc: 0.9317 Epoch 7/10 2789/2789 [==============================] - 8s 3ms/step - loss: 0.1069 - tp: 18235.0000 - fp: 9057.0000 - tn: 1351357.0000 - fn: 48864.0000 - accuracy: 0.9594 - precision: 0.6681 - recall: 0.2718 - auc: 0.9401 - val_loss: 0.1108 - val_tp: 2033.0000 - val_fp: 1031.0000 - val_tn: 150054.0000 - val_fn: 5495.0000 - val_accuracy: 0.9589 - val_precision: 0.6635 - val_recall: 0.2701 - val_auc: 0.9338 Epoch 8/10 2789/2789 [==============================] - 8s 3ms/step - loss: 0.1055 - tp: 19127.0000 - fp: 9621.0000 - tn: 1350793.0000 - fn: 47972.0000 - accuracy: 0.9597 - precision: 0.6653 - recall: 0.2851 - auc: 0.9421 - val_loss: 0.1100 - val_tp: 2113.0000 - val_fp: 1069.0000 - val_tn: 150016.0000 - val_fn: 5415.0000 - val_accuracy: 0.9591 - val_precision: 0.6640 - val_recall: 0.2807 - val_auc: 0.9350 Epoch 9/10 2789/2789 [==============================] - 8s 3ms/step - loss: 0.1046 - tp: 19749.0000 - fp: 9984.0000 - tn: 1350430.0000 - fn: 47350.0000 - accuracy: 0.9598 - precision: 0.6642 - recall: 0.2943 - auc: 0.9435 - val_loss: 0.1094 - val_tp: 2154.0000 - val_fp: 1107.0000 - val_tn: 149978.0000 - val_fn: 5374.0000 - val_accuracy: 0.9591 - val_precision: 0.6605 - val_recall: 0.2861 - val_auc: 0.9357 Epoch 10/10 2789/2789 [==============================] - 8s 3ms/step - loss: 0.1040 - tp: 20082.0000 - fp: 10168.0000 - tn: 1350246.0000 - fn: 47017.0000 - accuracy: 0.9599 - precision: 0.6639 - recall: 0.2993 - auc: 0.9445 - val_loss: 0.1090 - val_tp: 2191.0000 - val_fp: 1126.0000 - val_tn: 149959.0000 - val_fn: 5337.0000 - val_accuracy: 0.9593 - val_precision: 0.6605 - val_recall: 0.2910 - val_auc: 0.9364 CPU times: user 2min 29s, sys: 43.4 s, total: 3min 12s Wall time: 1min 20s . long_test = wide_to_long(data[&quot;train&quot;], unique_ratings) df_test = pd.DataFrame(long_test, columns=[&quot;user_id&quot;, &quot;item_id&quot;, &quot;interaction&quot;]) ds_test, _ = make_tf_dataset(df_test, [&quot;interaction&quot;], val_split=0, seed=None) . %%time ncf_predictions = ncf_model.predict(ds_test) df_test[&quot;ncf_predictions&quot;] = ncf_predictions . CPU times: user 3.81 s, sys: 210 ms, total: 4.02 s Wall time: 3.69 s . user_id item_id interaction ncf_predictions . 0 0 | 7 | 0 | 0.523643 | . 1 0 | 10 | 0 | 0.719504 | . 2 0 | 19 | 0 | 0.100669 | . 3 0 | 20 | 0 | 0.123813 | . 4 0 | 26 | 0 | 0.102480 | . #collapse data[&quot;ncf_predictions&quot;] = df_test.pivot( index=&quot;user_id&quot;, columns=&quot;item_id&quot;, values=&quot;ncf_predictions&quot; ).values print(&quot;Neural collaborative filtering predictions&quot;) print(data[&quot;ncf_predictions&quot;][:10, :4]) . . Neural collaborative filtering predictions [[7.7809501e-01 3.4897393e-01 2.3736593e-01 7.5093412e-01] [1.5352371e-01 1.8476248e-03 2.3163706e-02 3.6399364e-03] [4.6624422e-02 4.7096610e-04 1.2840241e-02 1.1576419e-04] [8.5962385e-02 1.4925003e-03 6.1967373e-03 5.1632524e-04] [5.8516884e-01 2.8336483e-01 7.5634271e-02 3.0715367e-01] [4.0988737e-01 2.2669524e-02 1.0599941e-02 4.0282601e-01] [6.0177052e-01 6.6075641e-01 7.8367621e-02 8.1673837e-01] [4.9012059e-01 8.9323461e-02 6.3689947e-03 6.7939401e-02] [1.5069479e-01 1.3713539e-03 2.8979778e-04 2.2239387e-03] [5.0181168e-01 6.9155514e-02 3.4887791e-02 4.8452517e-01]] . precision_ncf = tf.keras.metrics.Precision(top_k=TOP_K) recall_ncf = tf.keras.metrics.Recall(top_k=TOP_K) precision_ncf.update_state(data[&quot;test&quot;], data[&quot;ncf_predictions&quot;]) recall_ncf.update_state(data[&quot;test&quot;], data[&quot;ncf_predictions&quot;]) print( f&quot;At K = {TOP_K}, we have a precision of {precision_ncf.result().numpy():.5f} and a recall of {recall_ncf.result().numpy():.5f}&quot; ) . At K = 5, we have a precision of 0.10859 and a recall of 0.06487 . %%time # LightFM model norm = lambda x: (x - np.min(x)) / np.ptp(x) lightfm_model = LightFM(loss=&quot;warp&quot;) lightfm_model.fit(sparse.coo_matrix(data[&quot;train&quot;]), epochs=N_EPOCHS) lightfm_predictions = lightfm_model.predict( df_test[&quot;user_id&quot;].values, df_test[&quot;item_id&quot;].values ) df_test[&quot;lightfm_predictions&quot;] = lightfm_predictions wide_predictions = df_test.pivot( index=&quot;user_id&quot;, columns=&quot;item_id&quot;, values=&quot;lightfm_predictions&quot; ).values data[&quot;lightfm_predictions&quot;] = norm(wide_predictions) # compute the metrics precision_lightfm = tf.keras.metrics.Precision(top_k=TOP_K) recall_lightfm = tf.keras.metrics.Recall(top_k=TOP_K) precision_lightfm.update_state(data[&quot;test&quot;], data[&quot;lightfm_predictions&quot;]) recall_lightfm.update_state(data[&quot;test&quot;], data[&quot;lightfm_predictions&quot;]) print( f&quot;At K = {TOP_K}, we have a precision of {precision_lightfm.result().numpy():.5f} and a recall of {recall_lightfm.result().numpy():.5f}&quot; ) . At K = 5, we have a precision of 0.10541 and a recall of 0.06297 CPU times: user 1.01 s, sys: 235 ms, total: 1.25 s Wall time: 858 ms .",
            "url": "https://murilo-cunha.github.io/inteligencia-superficial/demo/neural%20networks/deep%20learning/recommender%20systems/paper/2020/09/11/neural_collaborative_filter.html",
            "relUrl": "/demo/neural%20networks/deep%20learning/recommender%20systems/paper/2020/09/11/neural_collaborative_filter.html",
            "date": " • Sep 11, 2020"
        }
        
    
  
    
        ,"post1": {
            "title": "O que é 'Gradient Descent' (GD)?",
            "content": "TL;DR . “Gradient descent” é um algoritmo de otimização. Ele é usado pra procurar mínimos de uma função de modo iterativo, dando passos em direção ao ponto “mais baixo” da função. . . Gradient Descent . Quando a gente fala em “machine learning”, ou “aprendizado de máquina”, o que eles querem dizer com esse “aprender”? Como que se ensina uma máquina? . Ehh… não é bem assim. Bem menos sexy, na verdade, mas também mais simples. . O Setup . Como que nós podemos medir o quão bom o nosso modelo de machine learning é? Como comparamos dois modelos diferentes? Existe uma função que mede exatamente isso, uma função que mede o erro de cada modelo. Essa função aceita os parâmetros do modelo, e retorna o erro do modelo. . . Nós temos que saber a derivada dessa nossa função de erro. Por exemplo, se eu estou jogando curling eu não posso jogar o disco muito forte nem muito fraco. Eu tenho que jogar na força certa. Se eu conseguir formular uma função matemática que pega a força que eu joguei o disco retorna a distância da disco até o meu alvo, esse seria a função do erro, e eu seria o modelo.1 . Aqui nós estamos tentando encontrar o parâmetro (no nosso exemplo a força) que vai reduzir o erro (distância) ao máximo. Mas como? . Encontrando o Mínimo . Essa pergunta não é nova. Desde o colegial nós aprendemos a achar mínimos e máximos de uma função. Mas e se nós tivermos várias variáveis? Poderíamos usar cálculo multivariável, resolvendo um sistema de equações com as derivadas parciais. . O problema é nós resolvemos essas equações simbolicamente - com variáveis simbólicas como $x$ e $y$. Mas isso é muito difícil para um computador. Algumas calculadoras até oferecem essa opção mas muitas vezes não encontra resultado. Uma solução mais robusta é resolver esse problema numericamente. . Além disso, resolvendo numericamente nós evitamos alguns problemas teóricos relacionados ao uso de derivadas de funções que não são contínuas.2 . A Matemática . Resolver numericamente consiste em computar valores aproximados da nossa função do erro e iterativamente mudar os parâmetros de nossa função, reduzindo esse erro aos poucos (se está confuso, calma que vai ficar mais claro até o fim desse post). Antes, vamos definir nossos termos: . . Fazendo aproximações e resolvendo numericamente, nós nunca chegamos de verdade no mínimo, mas chegamos bem perto dele. Ou seja, o resultado que temos também é uma aproximação do mínimo da nossa função. f→f rightarrowf→ nossa função que indica o erro do nosso modelo | p→p rightarrowp→ o parâmetro da nossa função | e→e rightarrowe→ o erro do nosso modelo para esse parâmetro | . ∴f(p)=e therefore f(p) = e∴f(p)=e . Vamos também supor para o nosso exemplo que nossa função seja concava, bonitinha, com um mínimo só. Alguma coisa assim: . . É importante perceber que uma função de erro é dificilmente assim. Em casos mais práticos a função é bem mais bagunçada e têm vários máximos e mínimos. E quando isso acontece, esses métodos vão aproximar um mínimo local, e não global. . Derivadas . Lembrando que uma derivada é o coeficiente angular de uma linha tangente à uma curva, se a gente “cai” num ponto aleatório da nossa função de erro, a gente percebe que: . Quando estamos “a frente” do nosso ponto mais baixo $ rightarrow$ nossa derivada é negativa | Quando estamos “pra trás” do nosso ponto mais baixo $ rightarrow$ nossa derivada é positiva | . . Ou seja, a derivada já nos indica pra que lado devemos caminhar. Mais tecnicamente, ela indica se o mínimo da nossa função está num valor maior ou menor do que o nosso $p$ atual! . Mais que isso, quando chegamos mais perto do mínimo nossa derivada também diminui. Ou seja, a magnitude da derivada também nos fala quão próximo desse mínimo nós estamos. . Passo a Passo - O Algorítmo . Agora nós podemos começar de um ponto aleatório e dar vários passinhos até chegar mais e mais perto do nosso mínimo. O nosso passo-a-passo fica assim: . Chuta aonde está o ponto mais baixo | Calcule a derivada da função nesse ponto | Ajuste o seu chute dando um passo em proporcional à derivada (na direção oposta) | Repita o processo até que esteja satisfeito | . . E é isso! A idéia básica é essa. O resto são detalhes de implementação. . Passo Maior que a Perna - Learning Rate . Mas e se a curva é muito íngreme e se nosso passo acaba sendo muito largo? E se a gente nunca consegue parar nesse mínimo porque sempre passamos dele? . . Nós podemos ajustar o passo, multiplicando por uma constante. Mas temos de tomar cuidado - se o passo for muito pequeno, talvez nunca chegaremos no mínimo (além de demorar muito mais do que o necessário) e se muito largo, e vamos acabar mais longe ainda. Como encontrar o essa constante? Tentativa e erro. Ao contrário do(s) parâmetro(s) da função, não encontramos esse valor através desse processo automatizado. . Essa constante é o que chamamos de learning rate (taxa de aprendizado, muitas vezes denominado $ alpha$), e é um hyperparâmetro do modelo. A equação então fica: . pt→p_{t} rightarrowpt​→ o “novo” parâmetro | pt−1→p_{t-1} rightarrowpt−1​→ o parâmetro anterior | α→ alpha rightarrowα→ uma constante que multiplicamos pela derivada, controlando o passo - a taxa de aprendizado | mt−1→m_{t-1} rightarrowmt−1​→ a derivada da função do erro, que é a linha tangente à função, computada no ponto $p_{t-1}$ | . pt←pt−1−αmt−1p_{t} leftarrow p_{t-1} - alpha m_{t-1}pt​←pt−1​−αmt−1​ . Os parâmetros de um modelo são os valores que são otimizados nesse processo. Os hyperparâmetros de um modelo são valores que não são otimizados sistematicamente e devemos ajustá-los manualmente. . Mas os mesmos cuidados aplicam aqui. Essa constante não pode ser muito larga, nem muito pequena. Se muito grande, voltamos a dar passos muito largos, e vice-versa. . Várias Variáveis - O Gradiente . Por enquanto nós estamos olhando exemplos muito simples. Mas e se tivéssemos muitas variáveis no nosso modelo? A idéia é a mesma: computamos a derivada parcial em relação a cada uma dessas variáveis, e damos passos nessas direções. Quando empacotamos todas essas derivadas parciais, nós temos o gradiente da nossa função de erro! Dai que vem o nome gradient descent (ou descida do gradiente). . Em duas dimensões, podemos pensar na nossa função de erro como tentando encontrar o ponto mais baixo de uma cratera, num dia muito nublado - damos um passo pra onde a inclinação indica. Quanto mais íngrime, maior o passo que damos. . Inclusive, o gradiente de uma função sempre aponta pra direção de maior aumento. Se formos para o sentido oposto do gradiente, estamos indo na direção de maior declínio. . Ah, e a nossa linha tangente vira um plano tangente à curva! . . Empacotando os parâmetros (um para cada dimensão) em um vetor, nos ficamos com: . pt⃗→ vec{p_{t}} rightarrowpt​​→ os “novos” parâmetros (um para cada dimensão) | pt−1⃗→ vec{p_{t-1}} rightarrowpt−1​​→ os parâmetros “anteriores” (um para cada dimensão) | ∇f(pt−1⃗)→ nabla f( vec{p_{t-1}}) rightarrow∇f(pt−1​​)→ o gradiente da função do erro, que são as derivadas parciais de cada uma das dimensões do nosso problema, computadas no ponto $ vec{p_{t-1}}$ | α→ alpha rightarrowα→ uma constante que multiplicamos pelo gradiente, controlando o passo - a taxa de aprendizado | . pt⃗←pt−1⃗−α∇f(pt−1⃗) vec{p_{t}} leftarrow vec{p_{t-1}} - alpha nabla f( vec{p_{t-1}})pt​ . ​←pt−1​ . ​−α∇f(pt−1​ . ​) . Eu sei que se você não está 100% confortável com álgebra linear isso pode assustar um pouco. Mas o que essa equação descreve são várias equações iguais à que apresentamos acima. Uma para cada dimensão do nosso problema. Ou seja: . d→d rightarrowd→ a dimensão do parâmetro | pt(d)→p_{t}^{(d)} rightarrowpt(d)​→ o “novo” parâmetro da dimensão $d$ | pt−1(d)→p_{t-1}^{(d)} rightarrowpt−1(d)​→ o parâmetro anterior da dimensão $d$ | α→ alpha rightarrowα→ uma constante que multiplicamos pela derivada, controlando o passo - a taxa de aprendizado | ∂∂pt−1(d)f(pt−1(d)))→ frac{ partial}{ partial p_{t-1}^{(d)}} f (p_{t-1}^{(d)})) rightarrow∂pt−1(d)​∂​f(pt−1(d)​))→ a derivadas parcial da nossa função do erro para a dimensão $d$, em relação ao parâmetro anterior da mesma dimensão | . pt(d)←pt−1(d)−α∂∂pt−1(d)f(pt−1(d))p_{t}^{(d)} leftarrow p_{t-1}^{(d)} - alpha frac{ partial}{ partial p_{t-1}^{(d)}} f (p_{t-1}^{(d)})pt(d)​←pt−1(d)​−α∂pt−1(d)​∂​f(pt−1(d)​) . Eu sei que ainda é muita letrinha, e que pode ser confuso. Respira fundo e vai com calma. Reveja isso quanto necessário e verifica que isso faz sentido. Quando falarmos de regressão linear isso também vai ficar mais claro. . “Aprendizado”? . Esse processo de reduzir o erro de um modelo é o que chamamos de “aprendizado”, ou como “ensinamos” do modelo! . Bom, eu sei que é meio decepcionante. Ninguém aprende assim. Mas calma, deixe-me explicar. em machine learning, essa função de erro é formulada a partir dos exemplos. Essa função muda de modelo para modelo. . No exemplo do começo do post, quando eu jogo curling, uma função de erro poderia ser a soma de todas as distâncias do centro do alvo até o meu disco. Ou seja, cada experiência minha é levada em consideração quando eu tento minimizar meu erro. . Quando seguimos as etapas desse algorítmo, cada passo é dado depois de computar a derivada. E a derivada leva em consideração todos as nossas tentatívas (exemplos)3. Ou seja, reduzimos o erro depois de “visitarmos” essas experiências passadas. Do mesmo jeito que eu, quanto mais vezes eu tento, vou melhorando (reduzindo meu erro). . Tudo depende de como definimos “aprender”. Se eu definir como “a melhora de performance com nossas experiências”, até faz sentido falar que a máquina aprende. . Além disso, quando falamos de stochastic gradient descent (descida do gradiente estocástico), ou online learning, nós visitamos uma parte dos exemplos pra cada passo, o que traz mais essa idéia de melhorar performance quando o modelo “vê” novas observações, e reforçando essa ideia de aprendizado. . Não vamos falar de stochastic gradient descent ou online learning nesse post. Aliás, existem muitas variações desses algoritmos de otimização. Na prática, ninguém acaba usando gradient descent desse jeito que eu expliquei por haver opções melhores, mas a idéia central de todos os algoritmos é a mesma. . Outras Implementações . Existem maneiras de melhorar a performance desses algoritmos. Por exemplo, nós poderíamos reduzir o learning rate a cada passo, usar uma idéia de momento, usar mais que apenas a primeira derivada, etc. Algum desses algorítmos são: . Métodos de Newton | Métodos de Quasi-Newton | Adam | . Não vamos explicar esses métodos nesse post. Mas cada um deles procura melhorar um aspecto do gradient descent, de uma maneira ou outra, mas todos tem suas ressalvas. As vezes eles acabam demorando mais pra chegar no nosso mínimo, ou então não conseguimos usá-los quando o número de dimensões aumenta, entre outros. . Nomenclatura . Nós falamos bastante dessa “função do erro”. Mas existem vários nomes que também são usados: . Função do erro (error function) | Função objetivo (objective function) | Função de custo (cost function) | Função de energia (energy function) | Função de perda (loss function) | . Em todos os casos, nós procuramos o mínimo dessa função. . Além disso, nós falamos sobre “aprender”. Em machine learning, esse processo também é chamado por nomes diferentes: . Aprender (learn) | Treinar (train) | Ajustar (fit) | . Explicamos o que são os parâmetros e os hyperparâmetros. Esse parâmetros são chamados de: . Parâmetros (parameters) - duh | Pesos (weights) | . São diferentes nomes, mas eles se referem às mesmas coisas! . Footnotes . Obviamente esse exemplo é muito simples. Existem muitos outros fatores que deveriam ser levados em consideração. Mas ainda assim esse é um problema comum em machine learning - muitas vezes existe bastante incerteza de que os dados obtidos possuem as informações necessárias para qualquer tipo de previsões. &#8617; . | Nossa função de erro não precisa ser diferenciável em todos os pontos. A função $f(x)= mid x mid$ por exemplo não é diferenciável quando $x=0$, mas como estamos resolvendo numericamente isso não é um problema (nunca vamos cair no ponto $0.00000…0$, mas talvez no $0.00000…1$, etc.). Mesmo que fosse, nós poderíamos, se quiséssemos, definir uma “derivada” no ponto $x=0$. &#8617; . | Para ver mais sobre como formulamos essas funções de erro (custo) a partir de nossas observações, veja um exemplo sobre regressão linear ou regressão logística. &#8617; . |",
            "url": "https://murilo-cunha.github.io/inteligencia-superficial/machine%20learning/algoritmos%20de%20otimiza%C3%A7%C3%A3o/aprendizado%20supervisionado/2020/04/12/grad_desc.html",
            "relUrl": "/machine%20learning/algoritmos%20de%20otimiza%C3%A7%C3%A3o/aprendizado%20supervisionado/2020/04/12/grad_desc.html",
            "date": " • Apr 12, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "Sobre",
          "content": "Sobre mim . Olá, eu nome é Murilo Cunha . Atualmente, eu moro e trabalho na Europa, como um engenheiro de machine learning. . Eu nasci em São Paulo, onde vivi até o colegial. De lá fui para os Estados Unidos, onde me formei em engenharia mecânica com concentração em mecatrônica. No meu último ano da faculdade, eu tive a oportunidade de trabalhar em engenharia industrial. Foi lá que eu percebi que não era exatamente isso com o que eu queria fazer. Resolvi fazer um mestrado em inteligência artificial na Bélgica, país onde moro hoje em dia. . Ao longo dos anos, eu percebi que por mais que exista bastante conteúdo legal sobre machine learning online, a maior parte é em inglês. Também entendo que por mais que muitos dominem a língua inglesa, ter o conteúdo em português facilitaria muito o aprendizado de muita gente. . Meu objetivo é ajudar a compartilhar o conteúdo que eu fui acumulando durante meus anos de aluno e de trabalho. Tudo em português, de maneira simples e clara. . Agradecimentos . Gostaria de agradecer meu irmão, Marcelo Cunha e Alicja Mazur que sempre me mandam coisas pra ler e rever. Aprendi muita coisa com eles e mais que isso eles me ajudam com a revisão do conteúdo do blog. . Sobre o blog . O blog foi criado usando fastpages, criado pela fast.ai. Essas páginas foram elaboradas a partir de Github Pages, usando Github Actions para criar posts de Markdown, Jupyter Notebooks out até Microsoft Word. Tudo baseado em Jekyll Pages. . O blog é uma página Jekyll, que facilita na criação de páginas estáticas usando Markdown. Com o Github Pages, fica fácil hostear essas paginas no Github, de graça. Em cima disso muitas pessoas desenvolveram maneiras de fazer as páginas mais interativas - comentários, pesquisa, etc. E o fastpages criou em cima de tudo isso, disponibilizando a criação de posts com Jupyter Notebooks, Markdown e até Microsoft Word. . Inclusive, todos os posts criados com Jupyter Notebooks podem ser reproduzidos pra você brincar e experimentar com o código, usando Google Colab ou Binder. Se disponível, você só precisa clicar nos ícones no começo do post. . . . Sobre as animações . Nas animações eu uso uma biblioteca em Python chamada Manim, criada pelo Grant Sanderson, mesmo criador do canal 3Blue1Brown. . As animações criadas por mim são inspiradas pelo 3Blue1Brown, um excelente canal para vídeos educativos sobre matemática - cálculo, algebra linear e até redes neurais. Pessoalmente, acho um dos melhores educadores do Youtube. Recomendo bastante. .",
          "url": "https://murilo-cunha.github.io/inteligencia-superficial/sobre/",
          "relUrl": "/sobre/",
          "date": ""
      }
      
  

  

  

  
  

  

  
  

  

  
  

  
  

}